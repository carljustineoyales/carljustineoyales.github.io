{"version":3,"sources":["Components/Page404.js","projects.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Page404","className","projects","name","link","image","tag","App","onClick","event","setState","search","target","value","state","filteredProject","this","filter","project","toLowerCase","includes","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAkBeA,G,YAdC,WACZ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SACX,qCACA,mCAEA,8DACI,6BADJ,qCCXHC,G,kBAAW,CACpB,CACIC,KAAM,uBACNC,KAAM,mEACNC,MAAO,gGACPC,IAAK,cAET,CACIH,KAAM,aACNC,KAAM,kEACNC,MAAO,gGACPC,IAAK,cAET,CACIH,KAAM,cACNC,KAAM,iEACNC,MAAO,uGACPC,IAAK,eAET,CACIH,KAAM,uBACNC,KAAM,4DACNC,MAAO,2GACPC,IAAK,iBC+BEC,G,iBA3CX,aAAe,IAAD,8BACV,+CAWJC,QAAU,SAACC,GAKT,EAAKC,SAAS,CAACC,OAAQF,EAAMG,OAAOC,SAdlC,EAAKC,MAAQ,CACTZ,SAAUA,EACVS,OAAQ,IALF,E,sEAoBJ,IAAD,OAEDI,EAAkBC,KAAKF,MAAMZ,SAASe,QAAO,SAACC,GAClD,OAAOA,EAAQZ,IAAIa,cAAcC,SAAS,EAAKN,MAAMH,OAAOQ,kBAKxD,OAHNE,QAAQC,IAAIP,GAGE,kBAAC,EAAD,U,GA9BFQ,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee930bbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Page404.css';\r\n\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"error\">\r\n                <h2>ERROR</h2>\r\n                <h1>404</h1>\r\n\r\n                <p>This page is under construction.\r\n                    <br/>Please come back again later.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Page404;","export const projects = [\r\n    {\r\n        name: 'Portfolio Web Design',\r\n        link: 'https://www.behance.net/gallery/89187143/My-Portfolio-Web-Design',\r\n        image: 'https://mir-s3-cdn-cf.behance.net/project_modules/1400_opt_1/567b6589187143.5ded711a88526.jpg',\r\n        tag: 'Web design'\r\n    },\r\n    {\r\n        name: 'ChessWorld',\r\n        link: 'https://www.behance.net/gallery/89073907/Chess-World-Web-design',\r\n        image: 'https://mir-s3-cdn-cf.behance.net/project_modules/1400_opt_1/0bb51489073907.5de9556cd8868.png',\r\n        tag: 'Web design'\r\n    },\r\n    {\r\n        name: 'RoboFriends',\r\n        link: 'https://carljustineoyales.github.io/robofriends-react-project/',\r\n        image: 'https://raw.githubusercontent.com/carljustineoyales/robofriends-react-project/master/src/roboapp.png',\r\n        tag: 'Programming'\r\n    },\r\n    {\r\n        name: 'Background Generator',\r\n        link: 'https://carljustineoyales.github.io/background-generator/',\r\n        image: 'https://raw.githubusercontent.com/carljustineoyales/background-generator/master/background-generator.png',\r\n        tag: 'Programming'\r\n    },\r\n]","import React, {Component} from 'react';\nimport './App.css';\nimport Page404 from '../Components/Page404';\nimport CardList from '../Components/CardList';\nimport Search from '../Components/Search';\nimport {projects} from '../projects';\nimport 'tachyons';\n\n//to use state convert function to class\nclass App extends Component {\n\n    constructor() {\n        super(); // \"this\" is not allowed without this line\n        \n        this.state = {\n            projects: projects,\n            search: ''\n        }\n    }\n\n    //this is a custom function\n    //this is an object so this.onClick\n    //if you make a custom method use \"functionName = () => {}\" syntax\n    onClick = (event) => {\n\n      //to get the value of the input to display in console\n      // console.log(event.target.value);\n      //to update state do \"this.setState\"\n      this.setState({search: event.target.value});\n    }\n\n    render() {\n\n      const filteredProject = this.state.projects.filter((project)=>{\n        return project.tag.toLowerCase().includes(this.state.search.toLowerCase())\n      })\n      console.log(filteredProject);\n\n        if (!false) {\n            return (<Page404/>);\n        } else {\n            return (\n                <div>\n                    <h1>Projects</h1>\n                    <Search searchChange={this.onClick}/>\n                    <CardList projects={filteredProject}/>\n                </div>\n\n            );\n        }\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}